import dotenv from "dotenv";
dotenv.config();

import express from "express";
import cors from "cors";
import paymentRoutes from "./routes/payment";
import logger from "./config/logger";
import { sendTelegramMessage } from "./services/telegramService";

const app = express();
const PORT = Number(process.env.PORT) || 4001;


console.log(process.env.NODE_ENV);

app.use(
  cors({
    credentials: true,
    origin: ['https://alexandrvasilev.onrender.com', 'https://alexandrvasilev.ru']
  })
);

// –≠—Ç–æ—Ç middleware –ø–∞—Ä—Å–∏—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã —Å Content-Type: application/json
// –∏ –¥–µ–ª–∞–µ—Ç –∏—Ö —Ç–µ–ª–æ (body) –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤ req.body.
// –ë–µ–∑ –Ω–µ–≥–æ req.body –≤ —Ç–≤–æ–∏—Ö —Ä–æ—É—Ç–∞—Ö –±—É–¥–µ—Ç undefined.
app.use(express.json());

app.use("/api", paymentRoutes);

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ‚Äì –ª–æ–≥–∏—Ä—É–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º.
process.on("unhandledRejection", async (reason: any) => {
  logger.error("–ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: Unhandled Promise Rejection", { reason });
  await sendTelegramMessage(
    `üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê</b>\n\n` +
    `<b>–¢–∏–ø:</b> Unhandled Promise Rejection\n` +
    `<b>–î–µ—Ç–∞–ª–∏:</b> ${String(reason)}\n` +
    `<b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}`
  );
});

process.on("uncaughtException", async (error: Error) => {
  logger.error("–ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: Uncaught Exception", { error: error.message, stack: error.stack });
  await sendTelegramMessage(
    `üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê</b>\n\n` +
    `<b>–¢–∏–ø:</b> Uncaught Exception\n` +
    `<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${error.message}\n` +
    `<b>Stack:</b> ${error.stack?.slice(0, 500)}...\n` +
    `<b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}`
  );
});

app.listen(PORT, "0.0.0.0", () => {
  logger.info(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
